Know the Concepts 
• What does if mean if a line in the program starts with the ’#’ character? 

	This indicates a comment. This is not interpreted by the machine and is instead used to leave notes about the
	program.

• What is the difference between an assembly language file and an object code 
file? 

	The .s assembly language file is source that hasn't yet been assembled (transformed into machine readable
	instructions). The .o file is an assembled source file.

• What does the linker do? 

	The linker adds additional data to the assembled source that allows the kernel to load and run the assembled
	file.

• How do you check the result status code of the last program you ran? 

	By typing echo `$?` at the command line

• What is the difference between movl $1, %eax and movl 1, %eax? 

	movl $1 uses immediate addressing mode to assign 1 to the eax register, %eax
	movl 1, %eax uses direct addressing mode to move the data at memory address 1 to %eax

• Which register holds the system call number? 

	eax holds the system call number. 
	ebx holds the exit status number	

• What are indexes used for? 
		
	Indexes are used to describe relative locations of data in a memory address or data structure

• Why do indexes usually start at 0? 

	They are defined to start at zero	


• If I issued the command movl data_items(,%edi,4), %eax and 
data_items was address 3634 and %edi held the value 13, what address would 
you be using to move into %eax? 
	
	This would load address 3634+13=3647

• List the general-purpose registers. 
	
	eax, ebx, ecx, edx, edi, esi	mnemonic: GP-abcdds
	
	special purpose registers:
	ebp,esp,eip,eflags		mnemonic: SPEC-bsif


• What is the difference between movl and movb? 
	
	movl will move 1 long-sized piece (4 bytes) of data starting from the specified address and index
	movb will move 1 byte-sized piece of data starting from the specified address and index
	
	

• What is flow control? 

	Flow control is the direction of which lines of code are executed in a program, and when


• What does a conditional jump do? 

	A conditional jump causes flow to move to the location specified by the jump if a given condition exists

• What things do you have to plan for when writing a program? 

	variables, their data types, flow control decisions, and proper logical structure of solutions

• Go through every instruction and list what addressing mode is being used for 
each operand. 

	instructions-DAIIBIR: direct > indexed, indirect > base pointer > immediate > register

	movl $0, %edi > immediate, register
	movl data_items(,%edi,4), %eax > indexed, register
	movl %eax, %ebx > register,register
	cmpl $0, %eax > immediate, register
	incl %edi > register
	movl data_items(,%edi,4), %eax > indexed, register


Use the Concepts 

• Modify the first program to return the value 3. 
	
	https://github.com/PortWhisperer/assemblyStudies/blob/master/(Textbook)_ProgrammingFromTheGroundUp-(In-Progress)/Assembly_Coding_Exercises__Chapter-3/maximum.s#L30-L38	

• Modify the maximum program to find the minimum instead. 

	https://github.com/PortWhisperer/assemblyStudies/blob/master/(Textbook)_ProgrammingFromTheGroundUp-(In-Progress)/Assembly_Coding_Exercises__Chapter-3/minimum.s#L30-L41

• Modify the maximum program to use the number 255 to end the list rather than 
the number 0 

	https://github.com/PortWhisperer/assemblyStudies/blob/master/(Textbook)_ProgrammingFromTheGroundUp-(In-Progress)/Assembly_Coding_Exercises__Chapter-3/maximum-ExitIf255.s#L30-L38

• Modify the maximum program to use an ending address rather than the number 
0 to know when to stop. 

	https://github.com/PortWhisperer/assemblyStudies/blob/master/(Textbook)_ProgrammingFromTheGroundUp-(In-Progress)/Assembly_Coding_Exercises__Chapter-3/maximum-ExitIfAddress.s#L29-L41

• Modify the maximum program to use a length count rather than the number 0 to 
know when to stop. 

	https://github.com/PortWhisperer/assemblyStudies/blob/master/(Textbook)_ProgrammingFromTheGroundUp-(In-Progress)/Assembly_Coding_Exercises__Chapter-3/maximum-ExitIfLength.s

• What would the instruction movl _start, %eax do? Be specific, based on 
your knowledge of both addressing modes and the meaning of _start. How 
would this differ from the instruction movl $_start, %eax? 

This would move the address pointed to by _start into the eax register. The addressing mode is direct addressing because _start is itself a pointer. Register addressing mode is used to pass the value into eax.

The

Going Further 
• Modify the first program to leave off the int instruction line. Assemble, link, 
and execute the new program. What error message do you get. Why do you 
think this might be? 


• So far, we have discussed three approaches to finding the end of the list - using 
a special number, using the ending address, and using the length count. 

Which approach do you think is best? Why? 

	the special number reduces the flexibility of the list somewhat, by removing a possible number and cutting off a range of numbers which might be less than or equal to our "special number". For e.g. if we expected only positives, we could use  -1 as our special number. But the program is explicitly now unable to handle negatives.

	Between the length and the pointer solution, these would depend on context. One situation in which the pointersolution would be much more suitable was described as follows:
	
	however, if you have a starting address and the elements are continuous in memory and of consistent size, the end of the list (one element past the last element) will always be  start_address+element_size*number_of_elements and then it doesn't matter what the address of the the start of the list is, as long as the address isn't hard-coded and simply points wrongly somewhere else



Which approach would you use if you knew that the list was sorted? Why? 
